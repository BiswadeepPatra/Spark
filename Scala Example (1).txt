1. Basic of Scala

2. Data Types of Scala

3. Operations in Scala

4. Decision Rule

5. Loop

6. Break & Continue

7. Scala Class & Object

8. Function

9. String

10. Scala Exception

11. Scala File I/O

12. Scala Multi Threading

13. Scala Collection


====================================================================================================================================================================================




object FunctionDefinition {

	def addInt( a:Int, b:Int ) : Int = { 
			var sum:Int = 0
					sum = a + b
					return sum
	}
}

================================================================

object CallingFunction {
  
	def main(args: Array[String]) {
		println( "Returned Value : " + addInt(5,7) );
	}
	
	def addInt( a:Int, b:Int ) : Int = {
			var sum:Int = 0
					sum = a + b
					return sum
	}
}

======================================================================

object CallByNameFunction {
  
	def main(args: Array[String]) {
		delayed(time());
	}
	def time() = {
		println("Getting time in nano seconds")
		System.nanoTime
	}
	def delayed( t: => Long ) = {
		println("In delayed method")
		println("Param: " + t)
	}
}

==========================================================================
object VariableArgFunction {

	def main(args: Array[String]) {
		printStrings("Hello", "Scala", "Python");
	}
	def printStrings( args:String* ) = {
		var i : Int = 0;
  	for( arg <- args ){
  		println("Arg value[" + i + "] = " + arg );
  		i = i + 1;
  	}
	}
}

====================================================================================
object DefaultParameterFunction { 
  
	def main(args: Array[String]) { 
		println( "Returned Value : " + addInt() ); 

	} 

	def addInt( a:Int=5, b:Int=7 ) : Int = {
			var sum:Int = 0 
			sum = a + b
			return sum 
	}
}

==================================================================================================================================================================================
object HelloWorldDemo {

	/* This is my first java program.
	 * This will print 'Hello World' as the output
	 */
	def main(args: Array[String]) {
		println("Hello, world!") // prints Hello World
	}
}

==================================================================================================================================================================================
object HelloWorldDemo extends App {

	/* This is my first java program.
	 * This will print 'Hello World' as the output
	 */

	println("Hello, world!") // prints Hello World

}

==================================================================================================================================================================================


====================================================================================================================================================================================
	var radius : Double = 10
	val PI : Double = 3.14
	radius = 12
	PI = 22/7
	
==========================================================================================
	var radious = 100;
	var radious : double = 90;

====================================================================================================================================================================================


==================================================================================================================================================================================

lazy val file = scala.io.Source.file("Edureka").mkStraing;

// val --- we can change

lazy val file = scala.io.Source.file("Edureka world").mkStraing;


// But we can't change over
file = scala.io.Source.file("Edureka world").mkStraing;

====================================================================================================================================================================================
class MyClass {
	var myField : Int = 100;
}

object HelloWorldDemo {

	def main(args: Array[String]) {
				var myClass = new MyClass
				println ("MyClass myField Value :" + myClass.myField)
				println("Hello, world!") // prints Hello World
	}
}

==================================================================================================================================================================================
Type	Value Space

Boolean   	true or false
Byte	  	8 bit signed value
Short		16 bit signed value
Char		16 bit unsigned Unicode character
Int			32 bit signed value
Long		64 bit signed value
Float		32 bit IEEE 754 single-precision float
Double		64 bit IEEE 754 double-precision float
String		A sequence of characters

==================================================================================================================================================================================
class MyClass {  

			var myBooleanField : Boolean = true
			var myByteField : Byte = 0
			var myShortField : Short = 0
			var myCharField : Char = 'a'
			var myIntField : Int = 0
			var myLongField : Long = 0l
			var myFloatField : Float = 0.9f
			var myDoubleField : Double = 0.6d
			var myStringField : String = "Hello World"

}

object AllDataTypeDemo {

	def main(args: Array[String]) {
	
				var myClass = new MyClass
				println ("MyClass myByteField Value :" + myClass.myByteField)
				println ("**************************************************")
				println ("MyClass myShortField Value :" + myClass.myShortField)
				println ("**************************************************")
				println ("MyClass myCharField Value :" + myClass.myCharField)
				println ("**************************************************")
				println ("MyClass myIntField Value :" + myClass.myIntField)
				println ("**************************************************")
				println ("MyClass myLongField Value :" + myClass.myLongField)
				println ("**************************************************")
				println ("MyClass myFloatField Value :" + myClass.myFloatField)
				println ("**************************************************")
				println ("MyClass myDoubleField Value :" + myClass.myDoubleField)
				println ("**************************************************")
				println ("MyClass myStringField Value :" + myClass.myStringField)

	}
}

==================================================================================================================================================================================

==================================================================================================================================================================================
object PartialDataTypeDemo {
	def main(args: Array[String]) {	
	
			var myVar :Int = 10;
			val myVal :String = "Hello Scala with datatype declaration.";
			var myVar1 = 20;
			val myVal1 = "Hello Scala new without datatype declaration.";
			println(myVar)
			println(myVal) 
			println(myVar1) 
			println(myVal1)
	}
}

==================================================================================================================================================================================
class MyClass {
	val (myVar1, myVar2) = Pair(40, "Foo")
}

object PairValueDemo {
	def main(args: Array[String]) {
	
			    var myClass = new MyClass
				println ("MyClass myVar1 Value :" + myClass.myVar1)
				println ("MyClass myVar2 Value :" + myClass.myVar2)
	}
}

==================================================================================================================================================================================
object ArithmeticOperatorsDemo {
	def main(args: Array[String]) {
	
		var a = 10;
		var b = 20;
		var c = 25; 
		var d = 25;
		println("a + b = " + (a + b) );
		println("a - b = " + (a - b) );
		println("a * b = " + (a * b) );
		println("b / a = " + (b / a) );
		println("b % a = " + (b % a) );
		println("c % a = " + (c % a) );
	}
}

==================================================================================================================================================================================
object RelationalOperatorsDemo {
	def main(args: Array[String]) {
	
		var a = 10;
		var b = 20;
		println("a == b = " + (a == b) );
		println("a != b = " + (a != b) );
		println("a > b = " + (a > b) );
		println("a < b = " + (a < b) );
		println("b >= a = " + (b >= a) );
		println("b <= a = " + (b <= a) );
	}
}

==================================================================================================================================================================================
object LogicalOperatorsDemo {
	def main(args: Array[String]) {
	
		var a = true;
		var b = false;
		println("a && b = " + (a&&b) );
		println("a || b = " + (a||b) );
		println("!(a && b) = " + !(a && b) );
	}
}

==================================================================================================================================================================================
object BitwiseOperatorsDemo {
	def main(args: Array[String]) {
	
		var a = 60; /* 60 = 0011 1100 */
		var b = 13; /* 13 = 0000 1101 */
		var c = 0;
		c = a & b; /* 12 = 0000 1100 */
		println("a & b = " + c );
		c = a | b; /* 61 = 0011 1101 */
		println("a | b = " + c );
		c = a ^ b; /* 49 = 0011 0001 */
		println("a ^ b = " + c );
		c = ~a; /* -61 = 1100 0011 */
		println("~a = " + c );
		c = a << 2; /* 240 = 1111 0000 */
		println("a << 2 = " + c );
		c = a >> 2; /* 215 = 1111 */
		println("a >> 2 = " + c );
		c = a >>> 2; /* 215 = 0000 1111 */
		println("a >>> 2 = " + c );
	}
}

==================================================================================================================================================================================
object AssignmentOperatorsDemo {
	def main(args: Array[String]) {
	
		var a = 10;
		var b = 20;
		var c = 0;
		c = a + b;
		println("c = a + b = " + c );
		c += a ;
		println("c += a = " + c );
		c -= a ;
		println("c -= a = " + c );
		c *= a ;
		println("c *= a = " + c );
		a = 10;
		c = 15;
		c /= a ;
		println("c /= a = " + c );
		a = 10;
		c = 15;
		c %= a ;
		println("c %= a = " + c );
		c <<= 2 ;
		println("c <<= 2 = " + c );
		c >>= 2 ;
		println("c >>= 2 = " + c );
		c >>= 2 ;
		println("c >>= a = " + c );
		c &= a ;
		println("c &= 2 = " + c );
		c ^= a ;
		println("c ^= a = " + c );
		c |= a ;
		println("c |= a = " + c );
	}
}

====================================================================================================================================================================================
class MyClass {
	var myStringField : String = """the present string
			                            spans three
			                            Lines"""
}

object StringDataTypeDemo {
	def main(args: Array[String]) {
		
				var myClass = new MyClass
				println ( "MyClass myStringField Value :" + myClass.myStringField )
				println("Hello, world!") // prints Hello World
	}
}

====================================================================================================================================================================================
class StringExample{  
    var name = "Sachin" 
    var surname = "Tendulkar"
    def show(){  
        println(s"$name $surname , How are you")  
    }  
}  
  
  
object MainObject{  
    def main(args:Array[String]){  
        var s = new StringExample()  
        s.show()  
    }  
}  

====================================================================================================================================================================================

class StringExample{  
    var s1 = "Scala string example"  
    var PI = 3.14159
    def show(){  
        println(f"This is $s1%s, scala version is $version%.2f")  
    }  
}  
 
object MainObject{  
    def main(args:Array[String]){  
        var s = new StringExample()  
        s.show()  
    }  
}  
====================================================================================================================================================================================
val x = 5;

var s = {  if ( x > 4 && x < 6 ) 0 else 1 }

var s = {  if ( x > 4 && x < 6 ) "positive" else 1 }

Satement & Expression 

val radious = 10;

val area = { val PI= 3.14, PI* radious * radious }


Java, C#, C, C++ have If/Else statements

Scala has If/Else expressions (like Excel, btw)

==================================================================================================================================================================================
object IfLoopDemo {
	def main(args: Array[String]) {
	
		var x = 10;
		if( x < 20 ){
			println("This is if statement");
		}
	}
}

==================================================================================================================================================================================
object IfElseLoopDemo {
	def main(args: Array[String]) {
	
		var x = 30;
		if( x < 20 ){
			println("This is if statement");
		} else{
			println("This is else statement");
		}
	}
}

====================================================================================================================================================================================
val x = 5;

var s = {  if ( x > 4 && x < 6 ) 0 else 1 }

var s = {  if ( x > 4 && x < 6 ) "positive" else 1 }


====================================================================================================================================================================================
object IfElseIfElseLoopDemo {
	def main(args: Array[String]) {
	
		var x = 30;
		if( x == 10 ){
			println("Value of X is 10");
		} else if( x == 20 ){
			println("Value of X is 20");
		} else if( x == 30 ){
			println("Value of X is 30");
		} else{
			println("This is else statement");
		}
	}
}

==================================================================================================================================================================================
object NestedIfLoopDemo {
	def main(args: Array[String]) {
	
		var x = 30;
		var y = 10;
		if( x == 30 ){
			if( y == 10 ){
				println("X = 30 and Y = 10");
			}
		}
	}
}
====================================================================================================================================================================================

Java, C#, C, C++ have switch statements

Scala has match expressions

==================================================================================================================================================================================
object WhileLoopDemo {
	def main(args: Array[String]) {
	
		// Local variable declaration:
		var a = 10;
		// while loop execution
		while( a < 20 ){
			println( "Value of a: " + a );
			a = a + 1;
		}
	}
}

==================================================================================================================================================================================
object DoWhileLoopDemo {
	def main(args: Array[String]) {
	
		// Local variable declaration:
		var a = 10;
		// do loop execution
		do{
			println( "Value of a: " + a ); 			
			a = a + 1;			
		} while( a < 20 )
	}
}

==================================================================================================================================================================================
object ForLoopDemo {
	def main(args: Array[String]) {
	
		var a = 0;
		// for loop execution with a range
		for( a <- 1 to 10){
			println( "Value of a: " + a );
		}
	}
}

==================================================================================================================================================================================
object ForLoopDemo {
	def main(args: Array[String]) {
	
		var a = 0;
		// for loop execution with a range
		for( a <- 1 until 10){
			println( "Value of a: " + a );
		}
	}
}

==================================================================================================================================================================================
object ForLoopDemo {
	def main(args: Array[String]) {
	
		var a = 0;
		var b = 0;
		// for loop execution with a range
		for( a <- 1 to 3; b <- 1 to 3){
			println( "Value of a: " + a );
			println( "Value of b: " + b );
		}
	}
}

==================================================================================================================================================================================
object ForLoopWithArrayDemo {
	def main(args: Array[String]) {
	
		var a = 0;
		val numList = List(1,2,3,4,5,6);
		// for loop execution with a collection
		for( a <- numList ){
			println( "Value of a: " + a );
		}
	}
}

==================================================================================================================================================================================
object ForLoopWithFilterDemo {
	def main(args: Array[String]) {
	
		var a = 0;
		val numList = List(1,2,3,4,5,6,7,8,9,10);
		// for loop execution with multiple filters
		for( a <- numList
				if a != 3; if a < 8 ){
			println( "Value of a: " + a );
		}
	}
}

==================================================================================================================================================================================
object ForLoopWithYieldDemo {
	def main(args: Array[String]) {
	
		var a = 0;
		val numList = List(1,2,3,4,5,6,7,8,9,10);
		// for loop execution with a yield
		var retVal = for{ a <- numList
			if a != 3; if a < 8
		} yield a
		// Now print returned values using another loop.
		for( a <- retVal){
			println( "Value of a: " + a );
		}
	}
}

==================================================================================================================================================================================
import scala.util.control._
object ForLoopUsingArrayDemo {
	def main(args: Array[String]) {
	
		var a = 0;
		val numList = List(1,2,3,4,5,6,7,8,9,10);
		val loop = new Breaks;
		loop.breakable {
			for( a <- numList){
				println( "Value of a: " + a );
				if( a == 4 ){
					loop.break;
				}
			}
		}
		println( "After the loop" );
	}
}

==================================================================================================================================================================================
import scala.util.control._
object BreakNestedLoopDemo {
	def main(args: Array[String]) {
	
		var a = 0;
		var b = 0;
		val numList1 = List(1,2,3,4,5);
		val numList2 = List(11,12,13);
		val outer = new Breaks;
		val inner = new Breaks;
		outer.breakable {
			for( a <- numList1){
				println( "Value of a: " + a );
				inner.breakable {
					for( b <- numList2){
						println( "Value of b: " + b );
						if( b == 12 ){
							inner.break;
						}
					}
				} // inner breakable
			}
		} // outer breakable.
	}
}

==================================================================================================================================================================================
object InfiniteLoopDemo {
	def main(args: Array[String]) {
	
		var a = 10;
		// An infinite loop.
		while( true ){
			println( "Value of a: " + a );
		}
	}
}

==================================================================================================================================================================================
object StringDemo { 

			var greeting = "Hello world!";
			val greeting1: String = "Hello, world!"
			def main(args: Array[String]) { 
					println( greeting ) 
					println( greeting1 ) 

} 
}

====================================================================================================================================================================================

object StringLengthDemo {  
	def main(args: Array[String]) {
	
		var palindrome = "Dot saw I was Tod";
		var len = palindrome.length();
		println( "String Length is : " + len );
	}
}

====================================================================================================================================================================================

object StringConcatDemo {
	def main(args: Array[String]) {
	
		var str1 = "Dot saw I was ";
		var str2 = "Tod";
		println("Dot " + str1 + str2);
	}
}

====================================================================================================================================================================================

object StringFormationDemo {
	def main(args: Array[String]) {
	
		        var floatVar = 12.456
				var intVar = 2000
				var stringVar = "Hello, Scala!"
				var fs = printf("The value of the float variable is " +
						"%f, while the value of the integer " +
						"variable is %d, and the string " +
						"is %s", floatVar, intVar, stringVar)
						println(fs)

	}
}

====================================================================================================================================================================================

object StringBuilderDemo {
	def main(args: Array[String]) {
	
		val builder = StringBuilder.newBuilder
				builder.append("cat ")
				builder.append("bird")

				// Print the StringBuilder and its length.
				println(builder)
				println(builder.length)

				// Convert StringBuilder to a string.
				val result = builder.toString()
				println(result)
	}
}

====================================================================================================================================================================================

object ArrayDemo {
	def main(args: Array[String]) {
	
		var myList = Array(1.9, 2.9, 3.4, 3.5)
				// Print all the array elements
				for ( x <- myList ) {
					println( x )
				}
		// Print summ of all elements
		var total = 0.0;
		for ( i <- 0 to (myList.length - 1)) {
			total += myList(i);
		}
		println("Total is " + total);
		
		// Finding the largest element
		var max = myList(0);
		for ( i <- 1 to (myList.length - 1) ) {
			if (myList(i) > max) max = myList(i);
		}
		println("Max is " + max);
	}
}

====================================================================================================================================================================================

object ArraySortDemo {

	def main(args: Array[String]) {
		var myList = Array(1.9, 5.4, 3.4, 3.5)
				// Print all the array elements
				for ( x <- myList ) {
					println( x )
				}
		val result = myList.sorted
		// Print all the array elements in sorted order
				for ( x <- result ) {
					println( x )
				}		
	}
}

====================================================================================================================================================================================

object ArraySumMixMinDemo {

	def main(args: Array[String]) {
	
		var myList = Array(1.9, 5.4, 3.4, 3.5)
		
		var sum1 = myList.sum		
		System.out.println("Sum of Array is : " + sum1 )
		
		var max1 = myList.max		
		System.out.println("Max of Array is : " + max1 )
		
		var myList1 = myList.mkString("**");		
		System.out.println("String of Array is : " + myList1 )		
				
	}
}

====================================================================================================================================================================================

import Array._

object MultiDimetionalArrayDemo {

	def main(args: Array[String]) {
		var myMatrix = ofDim[Int](3,3)
				// build a matrix
				for (i <- 0 to 2) {
					for ( j <- 0 to 2) {
						myMatrix(i)(j) = j;
					}
				}
		// Print two dimensional array
		for (i <- 0 to 2) {
			for ( j <- 0 to 2) {
				print(" " + myMatrix(i)(j));
			}
			println();
		}
	}
}

====================================================================================================================================================================================

import Array._
object ArrayConcatingDemo { 
	def main(args: Array[String]) { 
	
		var myList1 = Array(1.9, 2.9, 3.4, 3.5)
				var myList2 = Array(8.9, 7.9, 0.4, 1.5)


				var myList3 = concat( myList1, myList2)
				// Print all the array elements 
				for ( x <- myList3 ) { 
					println( x ) 
				} 
	} 
}

====================================================================================================================================================================================

import Array._
object ArrayUsingRangeDemo {
	def main(args: Array[String]) {
	
				var myList1 = range(10, 20, 2)
				var myList2 = range(10,20)
				// Print all the array elements
				for ( x <- myList1 ) {
					print( " " + x )
				}
		println()
		for ( x <- myList2 ) {
			print( " " + x )
		}
	}
}

====================================================================================================================================================================================

import Array._
import scala.collection.mutable.ArrayBuffer

object ArrayBufferDemo {
	def main(args: Array[String]) {
	
		val arrayBuffer = new scala.collection.mutable.ArrayBuffer[String]
				// add a string
				arrayBuffer += "Ravi"                 
				arrayBuffer += "Vijay"   
				arrayBuffer += "Ravi"                 
				arrayBuffer += "Ajay" 

				val iter: Iterator[Any] = arrayBuffer.iterator
				while (iter.hasNext) {
					println(iter.next.toString())
				}
	}
}

====================================================================================================================================================================================

import Array._
import scala.collection.mutable.ArrayBuffer

object ArrayBufferDemo {
	def main(args: Array[String]) {
	
		val arrayBuffer = ArrayBuffer[Int]()
				// add a Integer
				arrayBuffer += 1
				arrayBuffer += (2,3,5)
				arrayBuffer ++= Array(6,7,8)
				
				val iter: Iterator[Any] = arrayBuffer.iterator
				while (iter.hasNext) {
					println(iter.next.toString())
				}
	}
}

=============================================================================
import Array._
import scala.collection.mutable.ArrayBuffer

object ArrayBufferDemo {
	def main(args: Array[String]) {
		val arrayBuffer = ArrayBuffer[Int]()

				// add a Integer
				arrayBuffer += 1
				arrayBuffer += (2,3,5)
				arrayBuffer ++= Array(6,7,8)
				
				val iter: Iterator[Any] = arrayBuffer.iterator
				while (iter.hasNext) {
					println(iter.next.toString())
				}
		
				arrayBuffer.trimEnd(2)
				arrayBuffer.insert(2,9)
				arrayBuffer.insert(2,10,6,9)
				arrayBuffer.remove(2);
				arrayBuffer.remove(2,3);
				
				val iter1: Iterator[Any] = arrayBuffer.iterator
				while (iter1.hasNext) {
					println(iter1.next.toString())
				}
				
	}
}

=============================================================================
object BasicOperationOnListDemo {

	def main(args: Array[String]) {
	
				val fruit = "apples" :: ("oranges" :: ("pears" :: Nil))
				val nums = Nil
				println( "Head of fruit : " + fruit.head )
				println( "Tail of fruit : " + fruit.tail )
				println( "Check if fruit is empty : " + fruit.isEmpty )
				println( "Check if nums is empty : " + nums.isEmpty )
	}
}

=============================================================================
object ListConcatDemo {
	def main(args: Array[String]) {
	
		val fruit1 = "apples" :: ("oranges" :: ("pears" :: Nil))
				val fruit2 = "mangoes" :: ("banana" :: Nil)
				// use two or more lists with ::: operator
				var fruit = fruit1 ::: fruit2
				println( "fruit1 ::: fruit2 : " + fruit )
				// use two lists with Set.:::() method
				fruit = fruit1.:::(fruit2)
				println( "fruit1.:::(fruit2) : " + fruit )
				// pass two or more lists as arguments
				fruit = List.concat(fruit1, fruit2)
				println( "List.concat(fruit1, fruit2) : " + fruit )
				
	}
}

=============================================================================
object ListUniformDemo {
	def main(args: Array[String]) {
	
		val fruit = List.fill(3)("apples") // Repeats apples three times.
				println( "fruit : " + fruit )
				val num = List.fill(10)(2) // Repeats 2, 10 times.
				println( "num : " + num )
	}
}

=============================================================================
object ListTabulatingDemo { 
	def main(args: Array[String]) { 
	
		// Creates 5 elements using the given function. 
		val squares = List.tabulate(6)(n => n * n) 
				println( "squares : " + squares )
				val mul = List.tabulate( 4,5 )( _ * _ ) 
				println( "mul : " + mul ) 
	} 
}

=============================================================================
object ReverseListDemo {
  
	def main(args: Array[String]) {
	
		val fruit = "apples" :: ("oranges" :: ("pears" :: Nil))
				println( "Before reverse fruit : " + fruit )				
				println( "After reverse fruit : " + fruit.reverse )
	}
}

=============================================================================
object ListBufferDemo {
	def main(args: Array[String]) {
	
		val listBuffer = new scala.collection.mutable.ListBuffer[String]
				// add a string
				listBuffer += "Ravi"                 
				listBuffer += "Vijay"   
				listBuffer += "Ravi"                 
				listBuffer += "Ajay" 

				val iter: Iterator[Any] = listBuffer.iterator
				while (iter.hasNext) {
					println(iter.next.toString())
				}
	}
}

============================================================================
object ListBufferSortDemo {
	def main(args: Array[String]) {
	
		val listBuffer = new scala.collection.mutable.ListBuffer[String]

				// add a string
				listBuffer += "Ravi"                 
				listBuffer += "Vijay"   
				listBuffer += "Ravi"                 
				listBuffer += "Ajay" 

				val iter: Iterator[Any] = listBuffer.iterator
				while (iter.hasNext) {
					println(iter.next.toString())
				}
		
		val result = listBuffer.sorted
		val iter1: Iterator[Any] = result.iterator
				while (iter1.hasNext) {
					println(iter1.next.toString())
				}
		
		
		val result1 = listBuffer.sortWith((x, y) => x  < y )
		val iter2: Iterator[Any] = result1.iterator
				while (iter2.hasNext) {
					println(iter2.next.toString())
				}
		
		val result2 = listBuffer.sortBy ((x: String) => (x.charAt(1), x.charAt(0)))
		val iter3: Iterator[Any] = result2.iterator
				while (iter3.hasNext) {
					println(iter3.next.toString())
				}
	}
}

=============================================================================
object SetDemo { 
	def main(args: Array[String]) { 
	
		val fruit = Set("apples", "oranges", "pears") 
				val nums: Set[Int] = Set()
				println( "Head of fruit : " + fruit.head ) 
				println( "Tail of fruit : " + fruit.tail )

				println( "Check if fruit is empty : " + fruit.isEmpty ) 
				println( "Check if nums is empty : " + nums.isEmpty ) 
	} 
}

=============================================================================
object SetConcatDemo {
	def main(args: Array[String]) {
	
				val fruit1 = Set("apples", "oranges", "pears")
				val fruit2 = Set("mangoes", "banana")
				// use two or more sets with ++ as operator
				var fruit = fruit1 ++ fruit2
				println( "fruit1 ++ fruit2 : " + fruit )
				// use two sets with ++ as method
				fruit = fruit1.++(fruit2)
				println( "fruit1.++(fruit2) : " + fruit )
	}
}

============================================================================
object FindMaxMinOfSetDemo {
	def main(args: Array[String]) {
	
				val num = Set(5,6,9,20,30,45)
				// find min and max of the elements
				println( "Min element in Set(5,6,9,20,30,45) : " + num.min )
				println( "Max element in Set(5,6,9,20,30,45) : " + num.max )
	}
}

=============================================================================
object CommonValueOfSetDemo {

	def main(args: Array[String]) {	
				val num1 = Set(5,6,9,20,30,45)
				val num2 = Set(50,60,9,20,35,55)
				// find common elements between two sets
				println( "num1.&(num2) : " + num1.&(num2) )
				println( "num1.intersect(num2) : " + num1.intersect(num2) )
	}
}

=============================================================================
object UnifiedTypesAddInSet extends App {

			val set = new scala.collection.mutable.LinkedHashSet[Any]
			set += "This is a string"  // add a string
			set += 732                 // add a number
			set += 'c'                 // add a character
			set += true                // add a boolean value
			set += main _              // add the main function
			val iter: Iterator[Any] = set.iterator
			while (iter.hasNext) {
				println(iter.next.toString())
			}
}

=============================================================================
object LiskedHashSetDemo extends App {

			val linkedHashSet = new scala.collection.mutable.LinkedHashSet[String]
			// add a string
			linkedHashSet += "Ravi"                 
			linkedHashSet += "Vijay"   
			linkedHashSet += "Ravi"                 
			linkedHashSet += "Ajay"              // add the main function
			val iter: Iterator[Any] = linkedHashSet.iterator
			while (iter.hasNext) {
				println(iter.next.toString())
			}
}

=============================================================================
object HashSetDemo extends App {

			val linkedHashSet = new scala.collection.mutable.HashSet[String]
			// add a string
			linkedHashSet += "Ravi"                 
			linkedHashSet += "Vijay"   
			linkedHashSet += "Ravi"                 
			linkedHashSet += "Ajay"              // add the main function
			val iter: Iterator[Any] = linkedHashSet.iterator
			while (iter.hasNext) {
				println(iter.next.toString())
			}
}

=============================================================================
object TreeSetDemo extends App {

			val linkedHashSet = new scala.collection.mutable.TreeSet[String]
			// add a string
			linkedHashSet += "Ravi"                 
			linkedHashSet += "Vijay"   
			linkedHashSet += "Ravi"                 
			linkedHashSet += "Ajay"              // add the main function
			val iter: Iterator[Any] = linkedHashSet.iterator
			while (iter.hasNext) {
				println(iter.next.toString())
			}
}

=============================================================================
object MapDemo {
	def main(args: Array[String]) {
	
				val colors = Map("red" -> "#FF0000",
				"azure" -> "#F0FFFF",
				"peru" -> "#CD853F")
				val nums: Map[Int, Int] = Map()
				println( "Keys in colors : " + colors.keys )
				println( "Values in colors : " + colors.values )
				println( "Check if colors is empty : " + colors.isEmpty )
				println( "Check if nums is empty : " + nums.isEmpty )
	}
}

=============================================================================
object MapConcatDemo {
	def main(args: Array[String]) {
	
					val colors1 = Map("red" -> "#FF0000",
						"azure" -> "#F0FFFF",
						"peru" -> "#CD853F")
					val colors2 = Map("blue" -> "#0033FF",
								"yellow" -> "#FFFF00",
								"red" -> "#FF0000")
						// use two or more Maps with ++ as operator
						var colors = colors1 ++ colors2
						println( "colors1 ++ colors2 : " + colors )
						// use two maps with ++ as method
						colors = colors1.++(colors2)
						println( "colors1.++(colors2)) : " + colors )
	}
}

=============================================================================
object PrintKeyAndValueOfMapDemo { 
	def main(args: Array[String]) { 
	
				val colors = Map("red" -> "#FF0000", "azure" -> "#F0FFFF", "peru" -> "#CD853F")

				colors.keys.foreach{ i => 
				print( "Key = " + i ) 
				println(" Value = " + colors(i) )
		} 
	}
}

============================================================================
object CheckForKeyMapDemo {
	def main(args: Array[String]) {
	
				val colors = Map("red" -> "#FF0000",
				"azure" -> "#F0FFFF",
				"peru" -> "#CD853F")
				if( colors.contains( "red" )){
					println("Red key exists with value :" + colors("red"))
				}else{
					println("Red key does not exist")
				}
		if( colors.contains( "maroon" )){
			println("Maroon key exists with value :" + colors("maroon"))
		}else{
			println("Maroon key does not exist")
		}	
	}
}

===========================================================================
object MapDemo {
	def main(args: Array[String]) {

		val mapping = scala.collection.mutable.Map("Vishal" -> "Kumar",
				"Vijay" -> "Verma" )

				var x = mapping("Vishal")

				println(" Value of Vishal is :" + x )

				var y = mapping.getOrElse("Vishal",0)

				println(" Value of Vishal is :" + y )

				mapping -= "Vishal"

				mapping.keys.foreach{ i => 
				print( "Key = " + i ) 
				println(" Value = " + mapping(i) )

				mapping += ("Ajay" -> "Sharma")

				mapping.keys.foreach{ i => 
				print( "Key = " + i ) 
				println(" Value = " + mapping(i) )
				}
		}
	}

===========================================================================
object LinkedHashMapDemo {
	def main(args: Array[String]) {
	
				val linkedHashMap = new scala.collection.mutable.LinkedHashMap[String,Int]
				// add a string
				linkedHashMap("Amit") = 100                
				linkedHashMap("Vijay") = 101 
				linkedHashMap("Rahul") = 102
				linkedHashMap("Rahul") = 103

				linkedHashMap.keys.foreach{ i => 
				print( "Key = " + i ) 
				println(" Value = " + linkedHashMap(i) )}
	}
}

============================================================================
object HashMapDemo {
	def main(args: Array[String]) {
	
				val hashMap = new scala.collection.mutable.HashMap[String,Int]
				// add a string
				hashMap("Amit") = 100                
				hashMap("Vijay") = 101 
				hashMap("Rahul") = 102  

				hashMap.keys.foreach{ i => 
				print( "Key = " + i ) 
				println(" Value = " + hashMap(i) )}
	}
}

============================================================================
class WordCount {

	def countWords(text: String) = {	
		val counts = scala.collection.mutable.Map.empty[String, Int]
				for (rawWord <- text.split("[ ,!.]+")) {
					val word = rawWord.toLowerCase
							val oldCount = 
							if (counts.contains(word)) counts(word)
							else 0
							counts += (word -> (oldCount + 1))
				}
		counts

	}
}

object WordCountDemo {

	def main(args: Array[String]) {
				var map = scala.collection.mutable.Map.empty[String, Int]
				var wordCount = new WordCount
				map = wordCount.countWords("See Spot run! Run, Spot. Run!")
				println(map)
				println("Hello, world!")

	}
}

============================================================================
object Demo {
	def main(args: Array[String]) {
	
		val t = (4,3,2,1)
				val sum = t._1 + t._2 + t._3 + t._4
				println( "Sum of elements: " + sum )
	}
}

============================================================================
object Demo { 
	def main(args: Array[String]) { 
	
		val t = (4,3,2,1)
		t.productIterator.foreach{ 
			i =>println("Value = " + i )
		} 
	} 
}

===========================================================================
object Demo {
	def main(args: Array[String]) {
	
		val t = new Tuple3(1, "hello", Console)
		println("Concatenated String: " + t.toString() )
	}
}

===========================================================================
object Demo {
	def main(args: Array[String]) {
	
		val t = new Tuple2("Scala", "hello")
		println("Swapped Tuple: " + t.swap )
	}
}

===========================================================================
object Demo {
	def main(args: Array[String]) {
	
		println( "Returned Value : " + addInt(5,7) );
	}
	def addInt( a:Int, b:Int ) : Int = {
			var sum:Int = 0
					sum = a + b
					return sum

	}
}

============================================================================
object Demo {
	def main(args: Array[String]) {
	
		delayed(time());
	}
	def time() = {
		println("Getting time in nano seconds")
		System.nanoTime
	}
	def delayed( t: => Long ) = {
		println("In delayed method")
		println("Param: " + t)

	}
}

============================================================================
object Demo {
	def main(args: Array[String]) {
	
		printStrings("Hello", "Scala", "Python");
	}
	def printStrings( args:String* ) = {
		var i : Int = 0;
	for( arg <- args ){
		println("Arg value[" + i + "] = " + arg );
		i = i + 1;
	}
	}
}

============================================================================
object Demo { 
	def main(args: Array[String]) { 
	
		println( "Returned Value : " + addInt() ); 
	} 
	def addInt( a:Int=5, b:Int=7 ) : Int = { 
			var sum:Int = 0 
					sum = a + b
					return sum 
	} 
}

============================================================================
object Demo { 
	def main(args: Array[String]) {
	
		println( factorial(0) ) 
		println( factorial(1) ) 
		println( factorial(2) ) 
		println( factorial(3) ) 
	}
	def factorial(i: Int): Int = { 
			def fact(i: Int, accumulator: Int): Int = {
					if (i <= 1) accumulator else fact(i - 1, i * accumulator) 
			} 
			fact(i, 1) 
	} 
}	

============================================================================
import java.util.Date

object Demo {
	def main(args: Array[String]) {
	
		val date = new Date
				log(date, "message1" )
				Thread.sleep(1000)
				log(date, "message2" )
				Thread.sleep(1000)
				log(date, "message3" )
	}
	def log(date: Date, message: String) = {
		println(date + "----" + message)
	}
}

=========================================================================================
					       Naming conventions in Scala
=========================================================================================

By using standard Scala naming conventions, you make your code easier to read for yourself and for other programmers. Readability of Scala program is very important. It indicates that less time is spent to figure out what the code does.

Name							Convention

Class name				Should start with uppercase letter and be a noun e.g. String,
						Color, Button, System, Thread etc.

Interface name			Should start with uppercase letter and be an adjective e.g.
						Runnable, Remote, ActionListener etc.	

Method name				Should start with lowercase letter and be a verb e.g.
						actionPerformed(), main(), print(), println() etc.

Variable name			Should start with lowercase letter e.g. firstName, orderNumber
						etc.

Package name			Should be in lowercase letter e.g. java, lang, sql, util etc.

Constants name			Should be in uppercase letter. e.g. RED, YELLOW, MAX_PRIORITY
						etc.

==================================================================================================================================================================================

class VariableDeclaration {  

	var data=50;//instance variable  

	def method(){  
		var n=90;//local variable  
	}  
}

==================================================================================================================================================================================

class Employee {
  
		var emplId:Int=0;//data member (also instance variable)  
		var empName:String=null;//data member(also instance variable)    

} 

object DemoComp extends App {
		var s1=new Employee //creating an object of Student  
		System.out.println(s1.emplId);  
		System.out.println(s1.empName);
}

==================================================================================================================================================================================

class Employee { 
 
		var emplId:Int=0;//data member (also instance variable)  
		var empName:String=null;//data member(also instance variable) 

def insertRecord(r:Int, n:String){  //method  -- Behaviour.... 
		emplId=r;  
		empName=n;  
}  

def displayInformation(){System.out.println(emplId+" "+empName);} //method 

} 

object DemoComp extends App {
	var e1=new Employee();  
	var e2=new Employee();  
  
	e1.insertRecord(111,"Karan");  
	e2.insertRecord(222,"Aryan");  
  
	e1.displayInformation();  
	e2.displayInformation();  
}

==================================================================================================================================================================================

		There are two ways to overload the method in java
					By changing number of arguments
					By changing the data type

=========================================================================================

class Calculation {  
	def sum(a:Int,b:Int){System.out.println(a+b);}  
	def sum(a:Int,b:Int,c:Int){System.out.println(a+b+c);} 
}  

object DemoComp extends App {
	  var obj=new Calculation();  
	  obj.sum(10,20,30);  
	  obj.sum(20,20);   
}

=========================================================================================

class Calculation {  
	def sum(a:Int,b:Int){System.out.println(a+b);}  
	def sum(a:Double,b:Double){System.out.println(a+b);} 
}  

object DemoComp extends App {
	  var obj=new Calculation();  
	  obj.sum(10.5,10.5);  
	  obj.sum(20,20);   
}

=========================================================================================

class Calculation {  
	def sum(a:Int,b:Int):Int = { return a+b ;}  
	def sum(a:Int,b:Int):Long = { return a+b;} 
}  

object DemoComp extends App {
	  var obj=new Calculation();  
	  var result =  obj.sum(10,10); 
	  System.out.println("result == " + result )
}

==================================================================================================================================================================================

class Examination {
	var marks = 1
}

object DuckDemo extends App {
	var exm = new Examination
			exm.marks = 10 // It exm.marks_=(10)
			println(exm.marks) // It calls exm.marks
}

==================================================================================================================================================================================

class Counter1 {
	  private var value = 0 // You must initialize the field
	  def increment() { value += 1 } // Methods are public by default
  	  def current() = value
}

object Main1 extends App {
			val myCounter = new Counter1
			myCounter.increment()
			println(myCounter.current)
			val myCounter1 = new Counter1() // () ok
			println(myCounter1.current()) // () ok
}

=============================================================================
class Counter2 {
			private var value = 0 
			def increment() { value += 1 } 
			def current = value // No () in definition
}

object Main2 extends App {
			val myCounter = new Counter2
			myCounter.current // () not ok
			println(myCounter.current)

}

=============================================================================
class Duck{
	var size = 1
}

object DuckDemo extends App {
			var f = new Duck
			f.size = 10 // It calls f.size_=(10)
			//f.size_=(10) // It calls f.size_=(10)
			println(f.size) // It calls f.size()
}

=============================================================================
class PrivateDuck{
			private var privateAge= 0
			def age= privateAge //getter
			def age_= (newAge: Int) {if (newAge> privateAge) privateAge= newAge; }//setter
}


object PrivDuckDemo extends App {
			var f = new PrivateDuck
			//f.size= 10 // It calls f.size_=(10)
			f.age_=(-10) // It calls f.size_=(10)
			//f.age_=(10) // It calls f.size_=(10)
			println(f.age) // It calls f.size()
}

=============================================================================
class ReadOnlyCounter
{
	    private var value = 0
		def incr() { value +=1 }
	    def current= value
}


object ReadOnlyCtr extends App {
			var f = new ReadOnlyCounter
			f.incr
			println(f.current) // It calls f.size()
}

=============================================================================
class PrivateCounter {
	private var value = 0
			def incr() { value +=1 }
			def current= value
			def isLess(otherVal: PrivateCounter) = value < otherVal.value
}

class ObjectOnlyCounter {
	private[this] var value = 0
			def incr() { value +=1 }
			def current= value
			//def isLess(otherVal: ObjectOnlyCounter) = value < otherVal.value
}


object PrivateCtr extends App {
			var f1 = new PrivateCounter
			var f2 = new PrivateCounter
			f1.incr
			//f1.incr
			f2.incr
			println(f2.isLess(f1)) // It calls f.size()
}

===========================================================================
class AuxDuck{
	var size = 0;
	var age = 0;
	println(" ***** Hello India ***** ")
	def this(size: Int){
		this() // Calls the primary constructor
		this.size= size
	}

	def this(size:Int, age:Int)
	{
		this(size) // calls previous auxiliary constructor
		this.age= age
	}
}

object DemoDuck extends App {
	var d1 = new AuxDuck
	var d2 = new AuxDuck(5)
	var d3 = new AuxDuck(5,10)
	println (d1.size + "," + d1.age)
	println (d2.size, d2.age)
	println (d3.size, d3.age)

}

==================================================================================================================================================================================

class PrivateDuck{
	private var privateAge= -100
			def age= privateAge//getter
			def age_= (newAge: Int) {if (newAge> privateAge) privateAge= newAge; }//setter
}


object PrivDuckDemo extends App {
	var f = new PrivateDuck
			//f.size= 10 // It calls f.size_=(10)
			f.age_=(-10) // It calls f.size_=(10)
			println(f.age) // It calls f.size()
}

===========================================================================
class PrimDuck(val size:Int, val age:Int) {
	println(" ***** Inside duck constructor ***** ")
	def desc= "Duck of age "+ age + " is of size "+ size
}


object DemoPrimDuck extends App {
	var d1 = new PrimDuck(10, 5)
	println(d1.desc)
}

============================================================================
object SingletonReservations{
	private var lastNum= 0;
	def newReservationNum() = { lastNum+=1; lastNum}
}

object DemoRes extends App {
  
			val r1 = SingletonReservations.newReservationNum
			val r2 = SingletonReservations.newReservationNum
			val r3 = SingletonReservations.newReservationNum
			println("r1: " + r1 + " r2: "+ r2 + " r3: " + r3)
}

============================================================================
class SingletonReservations{
	private var lastNum= 0;
	def newReservationNum() = { lastNum+=1; lastNum}
}

object DemoRes extends App {
  
			val r1 = new SingletonReservations
			val r2 = new SingletonReservations
			val r3 = new SingletonReservations
			
			println("r1: " + r1.newReservationNum() + " r2: "+ r2.newReservationNum() + " r3: " + r3.newReservationNum())
}

============================================================================
class CompAccount{
			val id = CompAccount.newNum()
			private var bal= 0.0
}

object CompAccount{
	private var lastNum= 0;
	private def newNum() = { lastNum+=1; lastNum}
}

object DemoComp extends App {
			val r1 = new CompAccount
			println("id1: " + r1.id)
			println("id2: " + r1.id)
}

============================================================================

============================================================================


